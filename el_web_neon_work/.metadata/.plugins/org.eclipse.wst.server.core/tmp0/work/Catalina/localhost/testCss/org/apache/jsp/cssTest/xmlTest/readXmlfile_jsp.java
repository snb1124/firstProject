/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.70
 * Generated at: 2021-09-30 02:56:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.cssTest.xmlTest;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import java.io.File;
import a.b.c.com.common.CommonXML;

public final class readXmlfile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


// 접근제한자 프라이베이트 스트링 리턴 매개변수 스트링, 엘리먼트 하나씩
private static String getTagValue(String sTag, Element eElement){
	//nodelist 노드 배열 eElement.태그이름가져오는 함수 getElementsByTagName stag가져오고 해당 태그의 0번째 태그 의 자식 태그 가져와 초기화
	NodeList nlList = eElement.getElementsByTagName(sTag).item(0).getChildNodes();
	//노드 타입 변수 에 위에서 가져온 태그들의 0번째 태그 즉 루트태그를 초기화 
	Node nValue = (Node) nlList.item(0);
	//sTag 루트태그 리턴 
	return nValue.getNodeValue();
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("a.b.c.com.common.CommonXML");
    _jspx_imports_classes.add("org.w3c.dom.NodeList");
    _jspx_imports_classes.add("org.w3c.dom.Element");
    _jspx_imports_classes.add("org.w3c.dom.Document");
    _jspx_imports_classes.add("javax.xml.parsers.DocumentBuilder");
    _jspx_imports_classes.add("org.w3c.dom.Node");
    _jspx_imports_classes.add("javax.xml.parsers.DocumentBuilderFactory");
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"EUC-KR\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write('\r');
      out.write('\n');

//스트링 타입 변수 xmlFilePath에 파일 패스 초기화
//물리적 파일 경로 찾아서 변수에 저장 
	String xmlFilePath = CommonXML.XML_FILE_PATH;
//파일 클래스 fXmlFile 객채화 매개변수로 경로 가져간다 
//물리적 파일을 찾아 읽어온것 
	File fXmlFile = new File(xmlFilePath + "/file.xml");
//xml을 가져오는 패턴 정확히 이해하지 못했지만 이러한 형태를 띈다 점차 알아가보자 
	DocumentBuilderFactory dbFactroy = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactroy.newDocumentBuilder();
//도큐먼트 doc에 dBuilder클래스에 파스 함수를 호출한다 매개변수로 파일클래스 형태에 매개변수 파일경로를 가지고있는 객체를 초기화 
	Document doc = dBuilder.parse(fXmlFile);
//normalize?  객체 질렬화 등 개념이 있는데 간단하게 말해서 xml문서를 깨끗하게 만드세요
		//setparamter에서 clear하는 개념과 똑같음 
	doc.getDocumentElement().normalize();
	
//루트 태그를 가져와 출력
	out.println("Root element" + doc.getDocumentElement().getNodeName()+"<br>");
//태그 리스트에 
	NodeList nList = doc.getElementsByTagName("staff");
	out.println("---------------<br>");
	
	for(int temp = 0; temp < nList.getLength(); temp++){
		
		Node nNode = nList.item(temp);
		if(nNode.getNodeType() == Node.ELEMENT_NODE){
			Element eElement = (Element) nNode;
			
			out.println("First Name" + getTagValue("firstname", eElement)+"<br>");
			out.println("Last Name" + getTagValue("lastname", eElement)+"<br>");
			out.println("Nick Name" + getTagValue("nickname", eElement)+"<br>");
			out.println("Salary" + getTagValue("salary", eElement)+"<br>");
		}
		
		
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
