/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.70
 * Generated at: 2021-10-06 23:56:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ajaxTest;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ajax1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"EUC-KR\">\r\n");
      out.write("<title> Ajax Test </title>\r\n");
      out.write("<script  src=\"http://code.jquery.com/jquery-latest.min.js\"></script>\r\n");
      out.write(" <!-- \r\n");
      out.write(" 	Ajax(Asynchronous JavaScript and XML)\r\n");
      out.write(" 	\r\n");
      out.write(" 	Web 화면을 갱신하지 않고 Server로부터 Data를 가져오는 방법\r\n");
      out.write(" 	\r\n");
      out.write(" 	제이쿼리.함수() : jQuery.ajax() 	\r\n");
      out.write(" 	함수 : $.ajax(), load(), $.get(), $.post(), $.getJSON()\r\n");
      out.write(" 	\r\n");
      out.write(" 	예약어(keyword) : ajax() 함수에서 {} : 오브젝트 블럭에서 사용 하는 것 \r\n");
      out.write(" 	요청 키워드\r\n");
      out.write(" 	#####################################\r\n");
      out.write(" 	url      : 요청이 전송되는 URL이 포함된 문자열\r\n");
      out.write(" 	type     : http요청 방식 : GET/POST\r\n");
      out.write(" 	data     : http요청 파라미터 문자열 key=value&key=value\r\n");
      out.write(" 	           or http요청 후 리턴값 \r\n");
      out.write("	#####################################\r\n");
      out.write(" 	\r\n");
      out.write(" 	응답 키워드\r\n");
      out.write(" 	#####################################\r\n");
      out.write(" 	success  : function(data: 리턴매개변수, 변수 이름이 가변적이다 ){....} : http요청 성공시 이벤트 핸들러 \r\n");
      out.write(" 	error    : function(){.....} : http요청 실패시 이벤트 핸들러\r\n");
      out.write(" 	\r\n");
      out.write(" 	dataType : http요청 후 return하는 데이터 Type\r\n");
      out.write(" 	           xml, html, srcipt, json, jsonp, text\r\n");
      out.write(" 	#####################################\r\n");
      out.write("\r\n");
      out.write(" 	timeout  : http요청에 대한 제한 시간(단위 : ms)\r\n");
      out.write("	async    : 요청시 동기 유무 선택(true/false)\r\n");
      out.write("	           true : async, false : sync\r\n");
      out.write("	cache    : 브라우저에 의해 요청되는 페이지를 캐시(true/false)\r\n");
      out.write("	           true : 캐시사용, false : 캐시사용하지 않음 		\r\n");
      out.write("	           \r\n");
      out.write("	$.ajax() : $.ajax({url, type, dateType, data, success, error 키워드 사용})\r\n");
      out.write("	$ : 제이쿼리\r\n");
      out.write("	. : 링크 연산자\r\n");
      out.write("	ajax() : Ajax 함수 \r\n");
      out.write("	{} : 자바스크립트 객체\r\n");
      out.write("	{url, } : url : Ajax 키워드 : 요청이 전송되는 URL이 포함된 문자열\r\n");
      out.write("	        : , : 컴마세퍼레이션 : 키워드 구분자 \r\n");
      out.write("	\r\n");
      out.write("	success : 요청이 성공되면 응답을 받는 키워드\r\n");
      out.write("				function(data){}: 응답을 받는 함수 \r\n");
      out.write("				data 는 변수명 이다. \r\n");
      out.write("				 \r\n");
      out.write("	error : 요청이 실패하면 응답을 받는 키워드 \r\n");
      out.write("				function(data){}: 응답을 받는 함수 	\r\n");
      out.write("				data 는 변수명 이다. \r\n");
      out.write("				        \r\n");
      out.write("	=========================           \r\n");
      out.write("	$.ajax(\r\n");
      out.write("		{\r\n");
      out.write("			\"url\" : \"접속할 페이지 주소\" \r\n");
      out.write("		   ,\"type\" : \"GET\" or \"POST\"\r\n");
      out.write("		   ,\"dataType\" : \"XML\" or \"JSON\"\r\n");
      out.write("		   ,\"data\" : \"파라미터 문자열 key=value&key=value\" or { \"key\":\"value\", \"key\":\"value\"}\r\n");
      out.write("		   ,\"success\" : function(data){\r\n");
      out.write("		   				// 통신에 성공했을 때 실행되는 함수 \r\n");
      out.write("		   } \r\n");
      out.write("		   ,\"error\" : function(data){\r\n");
      out.write("		   				// 통신에 실패했을 때 실행되는 함수 \r\n");
      out.write("		   } \r\n");
      out.write("		}\r\n");
      out.write("	);	           			 	         \r\n");
      out.write("	\r\n");
      out.write("	$.get() : $.get({url, {파라미터}, functin(){} 키워드 사용})\r\n");
      out.write("	=========================   \r\n");
      out.write("	$.get(\r\n");
      out.write("		{\r\n");
      out.write("			\"url\"\r\n");
      out.write("		   ,{파라미터 Object(JSON)}\r\n");
      out.write("		   ,function (){\r\n");
      out.write("		   	// 통신에 성공했을 때 실행되는 함수 \r\n");
      out.write("		   }			\r\n");
      out.write("		}\r\n");
      out.write("	);\r\n");
      out.write("	\r\n");
      out.write("	var ajax = $.get(\"url\",{파라미터 Object(JSON)},function (){... });\r\n");
      out.write("	ajax.fail(function(){\r\n");
      out.write("		// 404, 500 에러등이 발생한 경우 실행 \r\n");
      out.write("	});\r\n");
      out.write("	ajax.always(function(){\r\n");
      out.write("		// 통신 성공, 실패 여부에 상관없이 무조건 마지막에 호출됨\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	$.post() : $.post({url, {파라미터}, functin(){} 키워드 사용})\r\n");
      out.write("	=========================   \r\n");
      out.write("	$.post(\r\n");
      out.write("		{\r\n");
      out.write("			\"url\"\r\n");
      out.write("		   ,{파라미터 Object(JSON)}\r\n");
      out.write("		   ,function (){\r\n");
      out.write("			// 통신에 성공했을 때 실행되는 함수 \r\n");
      out.write("		   }			\r\n");
      out.write("		}\r\n");
      out.write("	);\r\n");
      out.write("  -->\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("	$(document).ready(function(){\r\n");
      out.write("		\r\n");
      out.write("		$('#button').click(function(){\r\n");
      out.write("			alert(\">>>\");\r\n");
      out.write("			\r\n");
      out.write("			$.ajax({					\r\n");
      out.write("				type : \"POST\",\r\n");
      out.write("				url : \"/testCss/ajaxTest/data1.jsp\",\r\n");
      out.write("				data : {					\r\n");
      out.write("					id : $('#id').val(\"abc\"),	// data 는 쿼리 스트링 				\r\n");
      out.write("				},\r\n");
      out.write("				success : function (resData){\r\n");
      out.write("					alert(\"리턴 데이터 >>> : \" + resData);\r\n");
      out.write("					$('#ajaxResData').html(\"화면에 리턴 데이터 출력 : \"  + resData);\r\n");
      out.write("					console.log(\"콘솔에 리턴 데이터 출력 : \" + resData);\r\n");
      out.write("				},\r\n");
      out.write("				error : function (){\r\n");
      out.write("					alert(\"error\");\r\n");
      out.write("				}	\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("</script>		        \r\n");
      out.write("</head>\r\n");
      out.write("<body>		\r\n");
      out.write("	<form id=\"frm\">			\r\n");
      out.write("		<label>아이디</label><input name=\"id\" id=\"id\">\r\n");
      out.write("		<input id=\"button\" type=\"button\" value=\"버튼\">			\r\n");
      out.write("	</form>\r\n");
      out.write("	<div id=\"ajaxResData\">리턴 데이터</div>		\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
