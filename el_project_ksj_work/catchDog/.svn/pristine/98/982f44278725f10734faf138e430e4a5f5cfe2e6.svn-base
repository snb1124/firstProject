package com.catchdog.adoption.review.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.catchdog.adoption.review.service.ReviewService;
import com.catchdog.adoption.review.vo.ReviewVO;
import com.catchdog.common.ChabunUtil;
import com.catchdog.common.CommonUtils;
import com.catchdog.common.FileUploadUtil;
import com.catchdog.common.service.ChabunService;

@Controller
public class ReviewController {
	Logger logger = Logger.getLogger(ReviewController.class);
	
	private ReviewService reviewService;
	private ChabunService chabunService;
	
	//생성자 오토와이어드
	@Autowired(required=false)
	public ReviewController (ReviewService reviewService
							,ChabunService chabunService) {
		this.reviewService = reviewService;
		this.chabunService = chabunService;
		
	}
	
	//입양후기 게시판 전체 폼
	@GetMapping("reviewSelectForm")
	public String reviewSelectForm() {
		logger.info("ReviewController reviewSelectForm() 함수진입 >>> : ");
		return "adoption/review/reviewSelectForm";
	}
	
	//입양후기 게시판 조회 폼 
	@PostMapping("reviewSelectAll")
	public String reviewselectAll(ReviewVO rvo, Model model) {
	logger.info("ReviewController reviewSelectAll() 함수 진입 >>> : ");

	//페이징 변수 세팅
	int pageSize = CommonUtils.BOARD_PAGE_SIZE;
	int groupSize = CommonUtils.BOARD_GROUP_SIZE;
	int curPage = CommonUtils.BOARD_CUR_PAGE;
	int totalCount = CommonUtils.BOARD_TOTAL_COUNT;
	
	if (rvo.getCurPage() !=null) {
		curPage = Integer.parseInt(rvo.getCurPage());
		}
	
	rvo.setPageSize(String.valueOf(pageSize));
	rvo.setGroupSize(String.valueOf(groupSize));
	rvo.setCurPage(String.valueOf(curPage));
	rvo.setTotalCount(String.valueOf(totalCount));
	
	logger.info("ReviewControlloer reviewSelectPaging rvo.getPageSize() >>> : " + rvo.getPageSize());
	logger.info("ReviewControlloer reviewSelectPaging rvo.getGroupSize() >>> : " + rvo.getGroupSize());
	logger.info("ReviewControlloer reviewSelectPaging rvo.getCurPage() >>> : " + rvo.getCurPage());
	logger.info("ReviewControlloer reviewSelectPaging rvo.getTotalCount() >>> : " + rvo.getTotalCount());
	
	ReviewVO.printVO(rvo);
	
	List<ReviewVO> listAll = reviewService.reviewSelectAll(rvo);
	logger.info("ReviewController reviewSelectAll listAll.size() >>> : " + listAll.size());
	
	if(listAll.size() > 0) {
		model.addAttribute("listAll" , listAll);
		model.addAttribute("pagingRVO", rvo);
		
		return "adoption/review/reviewSelectAll";
		}
	
	return "adoption/review/reviewSelectAll";
	}

	/*
	//글 목록 페이징 조회 
	@RequestMapping(value="reviewSelectPaging", method=RequestMethod.GET)
	public String reviewSelectpaging(ReviewVO rvo, Model model) {
		logger.info("ReviewController reviewSelectAll 함수 진입 >>> : ");
		
		logger.info("ReviewController boardSelectPaging 함수 진입 >>> : 페이징 관련 로그 =============");
		
		//페이징 변수 세팅 
		int pageSize = CommonUtils.BOARD_PAGE_SIZE;
		int groupSize = CommonUtils.BOARD_GROUP_SIZE;
		int curPage = CommonUtils.BOARD_CUR_PAGE;
		int totalCount = CommonUtils.BOARD_TOTAL_COUNT;
		
		if (rvo.getCurPage() !=null) {
			curPage = Integer.parseInt(rvo.getCurPage());
		}
		rvo.setPageSize(String.valueOf(pageSize));
		rvo.setGroupSize(String.valueOf(groupSize));
		rvo.setCurPage(String.valueOf(curPage));
		rvo.setTotalCount(String.valueOf(totalCount));
		
		logger.info("ReviewController reviewSelectAll rvo.getPageSize() >>> : " + rvo.getPageSize());
		logger.info("ReviewController reviewSelectAll rvo.getGroupSize() >>> : " + rvo.getGroupSize());
		logger.info("ReviewController reviewSelectAll rvo.getCurpage() >>> : " + rvo.getCurPage());
		logger.info("ReviewController reviewSelectAll rvo.getTotalCount() >>> : " + rvo.getTotalCount());
		
		List<ReviewVO> listAll = reviewService.reviewSelectPaging(rvo);
		logger.info("ReviewController reviewSelectPaging listAll.size() >>> : " + listAll.size());
		
		if (listAll.size() > 0 ) {
			
			model.addAttribute("pagingRVO" , rvo);
			model.addAttribute("listAll", listAll);
			return "review/reviewSelectPaging";
		}
		
		return "adoption/review/reviewForm";
	}
	
	*/
	
	//입양후기  입력 폼 	
	@GetMapping("reviewForm")
	public String reviewForm() {
		logger.info("ReviewController reviewForm() 함수 진입 >>> : ");
		return "adoption/review/reviewForm";
	}
	
	//입양후기글 입력
	@PostMapping("reviewInsert") public String reviewInsert(HttpServletRequest req) {
		logger.info("ReviewController reviewInsert() 함수 진입 >>> : ");
		
		//채번구하기 
		String rbnum = ChabunUtil.getReviewChabun("D", chabunService.getReviewChabun().getRbnum());
		logger.info("ReviewController reviewInsert rbnum >>> : " + rbnum);
		
		//이미지 업로드 
		FileUploadUtil fu = new FileUploadUtil ( CommonUtils.ADOPTION_REVIEW_PATH
												,CommonUtils.ADOPTION_REVIEW_SIZE
												,CommonUtils.ADOPTION_REVIEW_ENCODE);
		boolean bool = fu.imgfileUpload(req);
		//boolean bool = fu.imgfileUploadSize(req);
		logger.info("BoardController boardInsert bool >>> : "  + bool);
		
		//채번, 이미지 업로드 성공하면 VO 세팅하기 
		ReviewVO _rvo = null;
		_rvo = new ReviewVO();
		
		String rbsubject = fu.getParameter("rbsubject");
		String rbwriter = fu.getParameter("rbwriter");
		String rbinsertdate = fu.getParameter("rbinsertdate");
		String rbcontent = fu.getParameter("rbcontent");
		String rbimage = fu.getParameter("rbimage");
		String rbupdatedate = fu.getParameter("rbupdatedate");
		String rbdeleteyn = fu.getParameter("rbdeleteyn");
		
		_rvo.setRbnum(rbnum);
		_rvo.setRbsubject(rbsubject);
		_rvo.setRbwriter(rbwriter);
		_rvo.setRbinsertdate(rbinsertdate);
		_rvo.setRbcontent(rbcontent);
		_rvo.setRbimage(rbimage);
		_rvo.setRbupdatedate(rbupdatedate);
		_rvo.setRbdeleteyn(rbdeleteyn);
		
		/*
		logger.info("ReviewController reviewInsert _rvo.getRbnum() >>> : "  + _rvo.getRbnum());
		logger.info("ReviewController reviewInsert _rvo.getRbcontent() >>> : " + _rvo.getRbcontent());
		logger.info("ReviewController reviewInsert _rvo.getRbimage() >>> : " + _rvo.getRbimage());
		*/
		
		int nCnt = reviewService.reviewInsert(_rvo);
		
		logger.info("ReviewController reviewInsert nCnt >>> : " + nCnt);
		
		if(nCnt > 0) {return "adoption/review/reviewInsert";}
		return "adoption/review/reviewForm";
		}

	
	//글 목록 조회 
	@RequestMapping(value="reviewSelectAll", method=RequestMethod.GET)
	public String reviewSelectAll(ReviewVO rvo, Model model) {
		
		
		logger.info("ReviewController reviewSelectAll 함수 진입 >>> : ");
		
		logger.info("ReviewController reviewSelectall 검색 관련 로그  >>> : ==================================" );
		logger.info("ReviewController reviewSelectall rvo.getKeyfilter() >>> : " + rvo.getKeyfilter());
		logger.info("ReviewController reviewSelectall rvo.getKeyword() >>> : " + rvo.getKeyword());
		logger.info("ReviewController reviewSelectall rvo.getStartdate() >>> : " + rvo.getStartdate());
		logger.info("ReviewController reviewSelectall rvo.getEnddate() >>> : " + rvo.getEnddate());
		
		
		List<ReviewVO> listAll = reviewService.reviewSelectAll(rvo);
		logger.info("ReviewController reviewSelectall listAll.size() >>> : " + listAll.size());
		
		if(listAll.size()> 0) {
			model.addAttribute("listAll", listAll);
			return "adoption/review/reviewSelectAll";
		}
		
		return "adoption/review/reviewForm";
	}



	//게시글 수정/삭제 글 조회 
	@RequestMapping(value="reviewSelect", method=RequestMethod.POST)
	public String reviewSelect(ReviewVO rvo, Model model) {
		logger.info("ReviewController reviewSelect 함수 진입 >>> : ");
		logger.info("ReviewController reviewSelect rvo.getrbnum() >>> : "  + rvo.getRbnum());
		
		List<ReviewVO> listR = reviewService.reviewSelect(rvo);
		logger.info("ReviewController reviewSelect listR.size() >>> : " + listR.size());
		
		if(listR.size() == 1 ) {
			model.addAttribute("listR", listR);
			return "adoption/review/reviewSelect";
		}
		return "adoption/review/reviewForm";
		
	}
	

	//글 수정하기
	@RequestMapping(value="reviewUpdate", method=RequestMethod.POST)
	public String reviewUpdate(ReviewVO rvo, Model model) {
		logger.info("ReviewController boardUpdate 함수 진입 >>> : ");
		
		logger.info("ReviewController boardUpdate rvo.getRbnum() >>> : " + rvo.getRbnum());
		logger.info("ReviewController boardUpdate rvo.getRbcontent() >>> : " + rvo.getRbcontent());
		int nCnt = reviewService.reviewUpdate(rvo);
		logger.info("ReviewController boardUpdate nCnt >>> : " + nCnt);
		
		if (nCnt > 0) {return "adoption/review/reviewUpdate";}
		return "adoption/review/reviewForm";
		
	}
	
	//글 삭제하기 
	@RequestMapping(value="reviewDelete", method=RequestMethod.POST)
	public String reviewDelete(ReviewVO rvo, Model model) {
		logger.info("ReviewController boardDelete 함수 진입 >>> : ");
		
		logger.info("ReviewController boardDelete rvo.getRbnum() >>> : " + rvo.getRbnum());
		int nCnt = reviewService.reviewDelete(rvo);
		logger.info("ReviewController boardDelete nCnt >>> : " + nCnt);
		
		if( nCnt > 0) {return "adoption/review/reviewDelete";}
		return "adoption/review/reviewForm";
	}
	

/*	
	//비밀번호 체크하기 
	@RequestMapping(value="boardPwCheck", method=RequestMethod.POST)
	@ResponseBody
	public Object boardPwCheck(ReviewVO rvo) {
		logger.info("ReviewController reviewPwCheck 함수진입 >>> : " );
		
		logger.info("ReviewController reviewPwCheck _rvo.getRbnum() >>> : " + rvo.getRbnum());
		logger.info("ReviewController reviewPwCheck _rvo.getRbpw() >>> : " + rvo.getRbpw());
		
		List<ReviewVO> list = reviewService.reviewPwCheck(rvo);
		logger.info("ReviewController reviewPwCheck _rvo.getRbpw() >>> : " + list.size());
		
		String msg = "";
		if(list.size() == 1) {msg = "PW_GOOD";}
		else {msg = "PW_BAD";}
		
		return msg; 
	}
	*/
}











