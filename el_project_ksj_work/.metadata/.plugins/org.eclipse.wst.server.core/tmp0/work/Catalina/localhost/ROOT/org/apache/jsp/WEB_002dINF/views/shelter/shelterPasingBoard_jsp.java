/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.70
 * Generated at: 2021-12-11 07:16:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.shelter;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.catchdog.shelter.vo.CatchdogVO;
import java.util.List;

public final class shelterPasingBoard_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.catchdog.shelter.vo.CatchdogVO");
    _jspx_imports_classes.add("java.util.List");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("  \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<title>지역동물보호소찾기</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
 request.setCharacterEncoding("UTF-8");
      out.write(' ');
      out.write('\r');
      out.write('\n');

	int curPage = 0;
	int pageSize = 0;
	int groupSize = 0;
	int totalCount = 0;
	
	//페이징 데이터
	Object objPaging = request.getAttribute("pagingVO");
	CatchdogVO pagingVO = (CatchdogVO)objPaging;

	// 게시판 데이터 
	Object obj = request.getAttribute("aList");
	List<CatchdogVO> list = (List)obj;

	int nCnt = list.size();
	System.out.println("nCnt >>> : " + nCnt);		

      out.write("  \r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/include/header.jsp", out, true);
      out.write("\r\n");
      out.write("<div id=\"map\" style= \"width:600px;height:300px;margin-top:50px;margin-left:auto;margin-right:auto;\"></div>\r\n");
      out.write("<script src=\"http://code.jquery.com/jquery-latest.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=aaab031f80e0cd017ab6fa5edea946d3&libraries=services\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("$(document).ready(function(){\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("	// 주소-좌표 변환 객체를 생성합니다\r\n");
      out.write("	var geocoder = new kakao.maps.services.Geocoder();\r\n");
      out.write("	\r\n");
      out.write("	geocoder.addressSearch($(\".address\").eq(1).text(), function(result, status) {\r\n");
      out.write("		\r\n");
      out.write("	    // 정상적으로 검색이 완료됐으면 \r\n");
      out.write("	     if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("	\r\n");
      out.write("	        var coords = new kakao.maps.LatLng(result[0].y, result[0].x);\r\n");
      out.write("	\r\n");
      out.write("	        // 결과값으로 받은 위치를 마커로 표시합니다\r\n");
      out.write("	        var marker = new kakao.maps.Marker({\r\n");
      out.write("	            map: map,\r\n");
      out.write("	            position: coords\r\n");
      out.write("	        });\r\n");
      out.write("	\r\n");
      out.write("	        // 인포윈도우로 장소에 대한 설명을 표시합니다\r\n");
      out.write("	        var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("	            content: $(\".address\").eq(1).text() // 여기에 꾸며주면됨.\r\n");
      out.write("	        });\r\n");
      out.write("	        infowindow.open(map, marker);\r\n");
      out.write("	\r\n");
      out.write("	        // 지도의 중심을 결과값으로 받은 위치로 이동시킵니다\r\n");
      out.write("	        map.setCenter(coords);\r\n");
      out.write("	  	  } \r\n");
      out.write("	});  \r\n");
      out.write("	\r\n");
      out.write("	var mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n");
      out.write("    mapOption = {\r\n");
      out.write("        center: new kakao.maps.LatLng(35.922355665, 128.599034473), // 초기 지도 중심좌표값\r\n");
      out.write("        level: 3 // 지도의 확대 레벨\r\n");
      out.write("    };  \r\n");
      out.write("	    \r\n");
      out.write("	// 지도를 생성합니다    \r\n");
      out.write("	var map = new kakao.maps.Map(mapContainer, mapOption);\r\n");
      out.write("		\r\n");
      out.write("		$('.address').click(function(){\r\n");
      out.write("		\r\n");
      out.write("			var address = $(this).text();\r\n");
      out.write("\r\n");
      out.write("			alert(address);\r\n");
      out.write("	\r\n");
      out.write("	geocoder.addressSearch(address, function(result, status) {\r\n");
      out.write("	\r\n");
      out.write("	    // 정상적으로 검색이 완료됐으면 \r\n");
      out.write("	     if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("	\r\n");
      out.write("	        var coords = new kakao.maps.LatLng(result[0].y, result[0].x);\r\n");
      out.write("	\r\n");
      out.write("	        // 결과값으로 받은 위치를 마커로 표시합니다\r\n");
      out.write("	        var marker = new kakao.maps.Marker({\r\n");
      out.write("	            map: map,\r\n");
      out.write("	            position: coords\r\n");
      out.write("	        });\r\n");
      out.write("	\r\n");
      out.write("	        // 인포윈도우로 장소에 대한 설명을 표시합니다\r\n");
      out.write("	        var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("	            content: address // 여기에 꾸며주면됨.\r\n");
      out.write("	        });\r\n");
      out.write("	        infowindow.open(map, marker);\r\n");
      out.write("	\r\n");
      out.write("	        // 지도의 중심을 결과값으로 받은 위치로 이동시킵니다\r\n");
      out.write("	        map.setCenter(coords);\r\n");
      out.write("	  	  } \r\n");
      out.write("		});  \r\n");
      out.write("\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("<form name=\"boardList\" id=\"boardList\">\r\n");
      out.write("	<table border=\"1\">\r\n");
      out.write("		<thead>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td colspan=\"10\" align=\"center\">\r\n");
      out.write("				<h2>게시판</h2>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td class=\"tt\">보호소 명</td>\r\n");
      out.write("				<td class=\"address\">보호소 주소</td>\r\n");
      out.write("				<td class=\"tt\">보호소 번호</td>\r\n");
      out.write("\r\n");
      out.write("			</tr>\r\n");
      out.write("		</thead>\r\n");
      out.write("		");

			curPage = Integer.valueOf(pagingVO.getCurPage());
			pageSize = Integer.valueOf(pagingVO.getPageSize());
			groupSize = Integer.valueOf(pagingVO.getGroupSize());
			totalCount = Integer.valueOf(pagingVO.getTotalCount());
			
			for(int i=0; i<nCnt; i++){		
				CatchdogVO cdvo = list.get(i);			
		
      out.write("\r\n");
      out.write("		<tbody>\r\n");
      out.write("			<tr class=\"mapp\" >\r\n");
      out.write("				<td class=\"tt\" id=\"csname\">");
      out.print(cdvo.getCsname() );
      out.write("</td>\r\n");
      out.write("				<td class=\"address\">");
      out.print(cdvo.getCsaddress() );
      out.write("</td> \r\n");
      out.write("				<td class=\"tt\">");
      out.print(cdvo.getCstel() );
      out.write("</td>\r\n");
      out.write("\r\n");
      out.write("			</tr>\r\n");
      out.write("			");
 
			} // end of for
			
      out.write("\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td colspan=\"7\">\r\n");
      out.write("				\r\n");
      out.write("				");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "shelterPasing.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("url", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("shelter.cd", request.getCharacterEncoding()) + "&" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("str", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("", request.getCharacterEncoding()) + "&" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("curPage", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(curPage ), request.getCharacterEncoding()) + "&" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("pageSize", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(pageSize ), request.getCharacterEncoding()) + "&" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("groupSize", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(groupSize ), request.getCharacterEncoding()) + "&" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("totalCount", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(totalCount ), request.getCharacterEncoding()), out, true);
      out.write("\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</tbody>\r\n");
      out.write("	</table>\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
